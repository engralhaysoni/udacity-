import time
import pandas as pd
import numpy as np

CITY_DATA = { 'chicago': 'chicago.csv',
              'new york city': 'new_york_city.csv',
              'washington': 'washington.csv' }

def get_filters():
    """
    Asks user to specify a city, month, and day to analyze.

    Returns:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    """
    print('Hello! Let\'s explore some US bikeshare data!')
    # TO DO: get user input for city (chicago, new york city, washington). HINT: Use a while loop to handle invalid inputs
    while True:
        city= str(input('name of the city to analyze')).lower()
        if city == 'chicago':
            city= 'chicago.csv'
        elif city == 'new york city':
            city = 'new_york_city.csv'
        elif city == 'washington':
            city = 'washington.csv'
        else:
            print('I do not find it')
            continue 
        break

    # TO DO: get user input for month (all, january, february, ... , june)
    while True:
        month = str(input('name of the month to filter by, or "all" to apply no month filter:')).title()
        months=['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'All']
        if month=='Jan':
            month=months[0]
        elif month=='Fep':
            month=months[1]
        elif month=='Mar':
            month=months[2]
        elif month=='Apr':
            month=months[3]
        elif month=='May':
            month=months[4]
        elif month=='Jun':
            month=months[5]
        elif month=='All':
            print('All')
        else:
            print('I do not find it')
            continue
        break

    # TO DO: get user input for day of week (all, monday, tuesday, ... sunday)
    while True:
        day = str(input('name of the day of week to filter by, or "all" to apply no day filter')).title()
        days=['Monday', 'Tuesday', 'Wednesday', 'Thurday', 'Friday', 'Saturday', 'Sunday', 'All']
        if day=='Monday':
            day=days[0]
        elif day=='Tuesday':
            day=days[1]
        elif day=='Wednesday':
            day=days[2]
        elif day=='Thurday':
            day=days[3]
        elif day=='Friday':
            day=days[4]
        elif day=='Saturday':
            day=days[5]
        elif day== 'Sunday':
            day=days[6]
        elif day=='All':
            print('All')
        else:
            print('I do not find it')
            continue
        break

    print('-'*40)
    return city, month, day


def load_data(city, month, day):
    """
    Loads data for the specified city and filters by month and day if applicable.

    Args:
        (str) city - name of the city to analyze
        (str) month - name of the month to filter by, or "all" to apply no month filter
        (str) day - name of the day of week to filter by, or "all" to apply no day filter
    Returns:
        df - Pandas DataFrame containing city data filtered by month and day
    """
    df = pd.read_csv(city)
    df['Start Time']=pd.to_datetime(df['Start Time'])
    df['month']=df['Start Time'].dt.month
    df['day_of_week']=df['Start Time'].dt.weekday_name

    if month != 'all':
        months= ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'All']
        month=months.index(month)+1
        df=df[df['month']==month]
    
    if day !='all':
        df=df[df['day_of_week']== day.title()]

    return df


def time_stats(df):
    """Displays statistics on the most frequent times of travel."""

    print('\nCalculating The Most Frequent Times of Travel...\n')
    start_time = time.time()

    # TO DO: display the most common month
    PM=df['month'].mode()[0]
    print("The common month is"+ str(PM)+".\n")

    # TO DO: display the most common day of week
    PD= df['day_of_week'].mode()[0]
    print("The common day is " + PD + ".\n")

    # TO DO: display the most common start hour
    df['hour'] = df['Start Time'].dt.hour

    PH = df['hour'].mode()[0]
    print("The common hour is " + str(PH) + ".\n")

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def station_stats(df):
    """Displays statistics on the most popular stations and trip."""

    print('\nCalculating The Most Popular Stations and Trip...\n')
    start_time = time.time()

    # TO DO: display most commonly used start station
    P_start_station = df['Start Station'].mode()[0]
    print("The  common used starting station is " + P_start_station + ".\n")
    

    # TO DO: display most commonly used end station
    P_end_station = df['End Station'].mode()[0]
    print("The common used ending station is " + P_end_station + ".\n")

    # TO DO: display most frequent combination of start station and end station trip
    df['Station Combo'] = df['Start Station'] + " | " + df['End Station']
    P_station_combo = df['Station Combo'].mode()[0]
    print("The most frequent combination of starting and ending stations is " + P_station_combo + ".\n")

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def trip_duration_stats(df):
    """Displays statistics on the total and average trip duration."""

    print('\nCalculating Trip Duration...\n')
    start_time = time.time()

    # TO DO: display total travel time
    m, s = divmod(int(df['Trip Duration'].sum()), 60)
    h, m = divmod(m, 60)
    d, h = divmod(h, 24)
    print("Total bikeshare travel time: " + str(d) + " days, " + str(h) + " hours, " + str(m) + " minutes, " + str(s) + " seconds.")


    # TO DO: display mean travel time
    m, s = divmod(int(df['Trip Duration'].mean()), 60)
    h, m = divmod(m, 60)
    print("Average bikeshare travel time: " + str(h) + " hours, " + str(m) + " minutes, " + str(s) + " seconds.")

    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)


def user_stats(df, city):
    """Displays statistics on bikeshare users."""

    print('\nCalculating User Stats...\n')
    start_time = time.time()

    # TO DO: Display counts of user types
    print("the breakdown of user types...")
    print(df['User Type'].value_counts())

    # TO DO: Display counts of gender
    if city not in('Chicago', 'New York City'):
        print("gender statistics for Washington do not find.")
    else:
        print("the breakdown of gender of users...")
        print(df['Gender'].value_counts())

    # TO DO: Display earliest, most recent, and most common year of birth
    if city not in('Chicago', 'New York City'):
        print("\n birth year statistics for Washington do not find.")
    else:
        print("\n some information on bikeshare users' birth years...")
        print("Earliest year of birth : " + str(int(df['Birth Year'].min())))
        print("Most recent birth year: " + str(int(df['Birth Year'].max())))
        print("Most common birth year: " + str(int(df['Birth Year'].mode()[0])))


    print("\nThis took %s seconds." % (time.time() - start_time))
    print('-'*40)

def raw_data(df):
    user_input = raw_input('Do you want to see raw data? Enter yes or no.\n')
    line_number = 0

    while True :
        if user_input.lower() != 'no':
            print(df.iloc[line_number : line_number + 5])
            line_number += 5
            user_input = input('\nDo you want to see more raw data? Enter yes or no.\n')
        else:
            break
def main():
    while True:
        city, month, day = get_filters()
        df = load_data(city, month, day)

        time_stats(df)
        station_stats(df)
        trip_duration_stats(df)
        user_stats(df, city)
       
        restart = input('\nWould you like to restart? Enter yes or no.\n')
        if restart.lower() != 'yes':
            break


if __name__ == "__main__":
	main()

